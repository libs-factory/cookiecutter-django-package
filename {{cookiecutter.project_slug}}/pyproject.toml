# ============================================================================
# PACKAGE CONFIGURATION (Required for package distribution)
# ============================================================================

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.0", "wheel"]

[project]
name = "{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.description }}"
readme = "README.md"
authors = [
  {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}"}
]
keywords = ["django", "django-package", "{{ cookiecutter.project_slug }}"]
requires-python = ">={{ cookiecutter.python_version }}"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 5.1",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12"
]
dynamic = ["dependencies", "version"]

# ==== setuptools ====
[tool.setuptools]
packages = ["{{cookiecutter.app_slug}}"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements/requirements.in"]}
version = {attr = "{{cookiecutter.app_slug}}.__version__"}

# ============================================================================
# CODE QUALITY TOOLS (Used for both package and development)
# ============================================================================

# ==== Ruff (Python linter and formatter) ====
[tool.ruff]
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"
# Exclude a variety of commonly ignored directories.
extend-exclude = [
  "*/migrations/*.py",
  "staticfiles/*"
]

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TC",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF"
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "UP038" # Checks for uses of isinstance/issubclass that take a tuple
]
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
  "UP038"
]

[tool.ruff.lint.isort]
force-single-line = true

# ============================================================================
# DEVELOPMENT/SANDBOX CONFIGURATION (Only for local development with sandbox)
# ============================================================================

# ==== Coverage (Mixed: package paths + Django plugin for sandbox) ====
[tool.coverage.run]
include = ["{{cookiecutter.app_slug}}/**"]  # Package-specific
omit = ["*/migrations/*", "*/tests/*"]  # Package-specific
plugins = ["django_coverage_plugin"]  # Sandbox/Development-specific

# ==== Django Type Stubs (Development only - uses sandbox settings) ====
[tool.django-stubs]
django_settings_module = "config.settings"

# ==== djLint (Code quality - both package and development) ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

# ==== MyPy (Development only - uses Django plugin for sandbox) ====
[tool.mypy]
python_version = "py{{ cookiecutter.python_version.replace('.', '') }}"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
  "mypy_django_plugin.main"  # Sandbox/Development-specific
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

# ==== pip-tools (Development only - manages dev dependencies) ====
[tool.pip-tools]
src-files = ["requirements/requirements.in"]
output-file = "requirements/requirements.txt"
generate-hashes = false
upgrade = false
